---
title: "20190919 class"
author: "jacky wang"
date: "2020/7/30"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(reticulate)

# 設定要使用的python（可能因要使用不同版本的python而路徑有所改變）
use_python("D:\\anaconda3\\envs\\classEnvironment\\python.exe", required = T)
# 在名為classEnvironment的沙盒下寫python
use_condaenv("classEnvironment", required = T)
```





# 物件設定

Python只有“=”，相當於R的“<-”

```{python}

a=5
type(a)    # check class

```



# 函數使用查詢

將游標點至函數上，再按F1。（在help那打只會查到R的函數）

```{python}

range

```



# 模組安裝

法1. 打開Anaconda navigator－＞選擇沙盒－＞選not installed－＞搜尋要安裝的套件
法2. 在R code chunk使用以下指令安裝
```{r}

# reticulate::conda_install(
#   envname = "classEnvironment",    # 要安裝在哪個沙盒
#   packages = c("numpy", "pandas")    # 要安裝的modules
# )

```

有些module無法使用conda安裝，只能使用pip，例如Google API client
```{r}

# conda_install(
#   "classEnvironment", 
#   c("google-api-python-client"), 
#   pip=TRUE    # 先別放這行，試試conda可否安裝。（尚未安裝）
# )
# 建議能用conda安裝module就用conda安裝，因為現在是在conda創造的沙盒內寫code。

```



# conda update（偶爾做）

Tools－＞Terminal－＞New Terminal 接著輸入：
  conda update conda
  conda update conda-build

更新classEnvironment內全部module：
  conda update -n classEnvironment --update-all



# 基本元素

## 零維（值）

在R內單一字串、數值、邏輯皆視為向量（atomic vector），但在Python內則否，稱為atomic type。

```{python}

# string = "chinese"    # can't use chinese
string1 = "Hello"
string2 = 'Fine'    # also ''
type(string1)
type(string2)

# ctrl+enter doesn't function (ctrl+enter = ctrl+shift+enter)

```

```{python}

numInteger = 3
type(numInteger)
# len(numInteger)    # object of type 'int' has no len()

numFloat = 3.
type(numFloat)
# len(numFloat)    # object of type 'float' has no len()

```
如果用float存，會佔較大的儲存空間。

```{python}

logiT=True
type(logiT)
logiF=False
type(logiF)

```

```{python}

logiT + logiT + logiF

```
python把True視為1；False視為0。

```{python}

# 4 = jacky

```
不可顛倒順序（變數=值）！

## 多維（向量）

```{python}

list1 = [1,3,5]
list2 = [1,"back",True,(1,True,["A"])] 
# 4 element, can put anything (0- or multi- dimension) in a vector
list3 = (1,"back",True,[1,True,{"A",1,5}],5)

len(list1)
len(list2)
len(list3)

```

atomic type及單純的tuple是immutable／hashable，但
  immutable：不可變的
  hashable：可雜湊的＝不可變的
```{python}

(2,3,[4,5])    # not hashable because of element 3

```

### practice

```{python}

listA = [1,3,True]
tupleA = (1,True,8)
setA = {1,3,5,7}

type(tupleA)
len(setA)

```

### unpacking

list／tuple可進行unpacking

```{python}

listA = [1,3,True]
tupleA = (1,True,8)
setA = {1,3,5,7}

```

```{python}

var1, var2, var3 = listA
var1
var2
var3

```

```{python}

dir()    # If called without an argument, return the names in the current scope. 

del var1, var2, var3    # delete object

```
scope 範圍

```{python}

tupleA

# tupleA = var1, var2, var3 
# can't change the position in defining variables (variable = value)

var1, var2, var3 = tupleA
var1; var2;var3

```

```{python}

del var1, var2, var3    # delete object

```

```{python}

listA

a,*b = listA    # b take the rest (behind)
a; type(a)
b; type(b)

```

```{python}

listA

*a,b = listA    # a take the rest (front)
a; type(a)
b; type(b)

```
#### practice

```{python}

gradeTuple=("Jacky",88,72)
type(gradeTuple)

name, *grade = gradeTuple

name
grade    # change to 'list'
type(grade)

```

```{python}

gradeTuple=("Jacky", 88, 72, "male")
type(gradeTuple)

name, *grade , gender= gradeTuple

name
grade    # change to 'list'
gender

```

### set

原則上元素只能是atomic type或hashable tuple。（不可變的）

```{python}

setD={1,"a",(1,4)}
type(setD)
print(setD)

```

```{python}

# setF={1,"b",[1,4]}    # TypeError: unhashable type: 'list'

```

```{python}

setG={1,"b",(1,4,(5,8))}
print(setG)

# setH={1,"b",(1,4,[5,8])}    # TypeError: unhashable type: 'list'

```

集合set為數學上可能出象的列表，所以每個出象只需要列一次即可
```{python}

set1={1, "b", "b", 2, 23, 2, 2}
set1

len(set1)

```

使用set來刪除list中重覆的元素
```{python}

listY=[1,1,3,0,1,0,2,8,8,8,9,9,8,8,9,9,5,5]
listY

set(listY)
listY = list(set(listY))
listY

```

若不小心將既有函數設定成object，用 ［del 函數名稱］稱 解決！
```{python}

# list4=[1,1,3,0,1,0,2]
# set=5
# 
# set(list4)

```

```{python}
list4=[1,1,3,0,1,0,2]
set=5
del set
set(list4)
```

```{python}
dir()
del a, b, gender, grade, gradeTuple, list1, list2, list3, list4, listA, listY 
del logiF, logiT, name, numFloat, numInteger, set1, setA, setD, setG, string1, string2, 
del tupleA
```

```{python}
dir()
```



# 元素粹取

依元素「數值位置」取，稱為index。
依元素「名稱」取，稱為dictionary key。

list與tuple，其元素無法命名，都「只能」使用index來取。

```{python}

listA=[1, 3, True]

listA[0]    # start with 0! 
listA[1]
listA[2]
# listA[3]    # IndexError: list index out of range

```

```{python}

tupleA=[1,True,8]

tupleA[0]    # start with 0! 
tupleA[1]
tupleA[2]
# listA[3]    # IndexError: list index out of range

```










